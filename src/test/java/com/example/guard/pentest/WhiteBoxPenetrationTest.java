package com.example.guard.pentest;

import com.example.guard.entity.Role;
import com.example.guard.entity.User;
import com.example.guard.repository.UserRepository;
import com.example.guard.service.AuthService;
import com.example.guard.service.RateLimitService;
import com.example.guard.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.annotation.Commit;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥ - –∏–º–∏—Ç–∞—Ü–∏—è –∞—Ç–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ —Å–æ –∑–Ω–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class WhiteBoxPenetrationTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private org.springframework.security.core.userdetails.UserDetailsService userDetailsService;

    @Autowired
    private UserService userService;

    @Autowired
    private RateLimitService rateLimitService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    @Commit
    void setUp() {
        // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        userRepository.deleteAll();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        createTestUsers();
        
        rateLimitService.cleanup();
    }

    private void createTestUsers() {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = new User();
        user.setUsername("user");
        user.setPassword(passwordEncoder.encode("password"));
        user.setRole(Role.USER);
        user.setEnabled(true);
        userRepository.save(user);

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        User admin = new User();
        admin.setUsername("admin");
        admin.setPassword(passwordEncoder.encode("password"));
        admin.setRole(Role.ADMIN);
        admin.setEnabled(true);
        userRepository.save(admin);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User lockedUser = new User();
        lockedUser.setUsername("lockeduser");
        lockedUser.setPassword(passwordEncoder.encode("password"));
        lockedUser.setRole(Role.USER);
        lockedUser.setEnabled(true);
        lockedUser.setLoginAttempts(5);
        lockedUser.setLockedUntil(LocalDateTime.now().plusMinutes(15));
        userRepository.save(lockedUser);

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User disabledUser = new User();
        disabledUser.setUsername("disableduser");
        disabledUser.setPassword(passwordEncoder.encode("password"));
        disabledUser.setRole(Role.USER);
        disabledUser.setEnabled(false);
        userRepository.save(disabledUser);
    }

    @Test
    void testWhiteBoxAttack_InternalServiceManipulation() {
        System.out.println("üîç White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü–æ–ø—ã—Ç–∫–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ UserService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        List<com.example.guard.dto.UserDto> allUsers = userService.getAllUsers();
        assertThat(allUsers).isNotEmpty();
        System.out.println("‚úÖ UserService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç " + allUsers.size() + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UserDetailsService
        UserDetails userDetails = userDetailsService.loadUserByUsername("admin");
        assertThat(userDetails).isNotNull();
        assertThat(userDetails.getUsername()).isEqualTo("admin");
        System.out.println("‚úÖ AuthService –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userDetails.getUsername());
        
        // –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assertThat(userDetails.getAuthorities()).hasSize(1);
        assertThat(userDetails.getAuthorities().iterator().next().getAuthority()).isEqualTo("ROLE_ADMIN");
        System.out.println("‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: ROLE_ADMIN");
    }

    @Test
    void testWhiteBoxAttack_DatabaseDirectAccess() {
        System.out.println("üóÑÔ∏è White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        Optional<User> adminUser = userRepository.findByUsername("admin");
        assertThat(adminUser).isPresent();
        assertThat(adminUser.get().getRole()).isEqualTo(Role.ADMIN);
        System.out.println("‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + adminUser.get().getUsername());
        
        // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ UserService
        List<com.example.guard.dto.UserDto> adminUsers = userService.getUsersByRole(Role.ADMIN);
        assertThat(adminUsers).isNotEmpty();
        System.out.println("‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Ä–æ–ª—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ " + adminUsers.size() + " –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        List<User> allUsers = userRepository.findAll();
        assertThat(allUsers.size()).isGreaterThanOrEqualTo(2); // admin –∏ user –º–∏–Ω–∏–º—É–º
        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç: " + allUsers.size() + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    @Test
    void testWhiteBoxAttack_RateLimitBypassAttempts() {
        System.out.println("‚è±Ô∏è White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ rate limiting");
        
        String clientId = "whitebox-attacker";
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã RateLimitService
        for (int i = 0; i < 10; i++) {
            boolean allowed = rateLimitService.isAllowed(clientId);
            assertThat(allowed).isTrue();
        }
        
        // 11-–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        boolean blocked = rateLimitService.isAllowed(clientId);
        assertThat(blocked).isFalse();
        System.out.println("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 11-–π –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö clientId –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤
        String[] differentClientIds = {"client1", "client2", "client3", "client4", "client5"};
        int successfulRequests = 0;
        
        for (String id : differentClientIds) {
            for (int i = 0; i < 10; i++) {
                if (rateLimitService.isAllowed(id)) {
                    successfulRequests++;
                }
            }
        }
        
        // –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π –ª–∏–º–∏—Ç
        assertThat(successfulRequests).isEqualTo(50); // 5 –∫–ª–∏–µ–Ω—Ç–æ–≤ * 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        System.out.println("‚úÖ –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: " + successfulRequests + " —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤");
    }

    @Test
    void testWhiteBoxAttack_AuthenticationBypassAttempts() {
        System.out.println("üîê White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assertThrows(UsernameNotFoundException.class, () -> {
            userDetailsService.loadUserByUsername("nonexistent");
        });
        System.out.println("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<User> lockedUser = userRepository.findByUsername("lockeduser");
        if (lockedUser.isPresent()) {
            // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º accountLocked
            UserDetails userDetails = userDetailsService.loadUserByUsername("lockeduser");
            assertThat(userDetails.isAccountNonLocked()).isFalse();
            System.out.println("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ");
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<User> disabledUser = userRepository.findByUsername("disableduser");
        if (disabledUser.isPresent()) {
            // –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º disabled
            UserDetails userDetails = userDetailsService.loadUserByUsername("disableduser");
            assertThat(userDetails.isEnabled()).isFalse();
            System.out.println("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ");
        }
    }

    @Test
    void testWhiteBoxAttack_ConcurrentAccessAttempts() {
        System.out.println("üîÑ White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞");
        
        String endpoint = "/admin/users";
        int numberOfThreads = 10;
        ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞
        CompletableFuture<ResponseEntity<String>>[] futures = new CompletableFuture[numberOfThreads];
        
        for (int i = 0; i < numberOfThreads; i++) {
            futures[i] = CompletableFuture.supplyAsync(() -> {
                return restTemplate.withBasicAuth("admin", "password")
                        .getForEntity(endpoint, String.class);
            }, executor);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        CompletableFuture.allOf(futures).join();
        executor.shutdown();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        int successCount = 0;
        for (CompletableFuture<ResponseEntity<String>> future : futures) {
            try {
                ResponseEntity<String> response = future.get();
                if (response.getStatusCode().is2xxSuccessful()) {
                    successCount++;
                }
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            }
        }
        
        assertThat(successCount).isEqualTo(numberOfThreads);
        System.out.println("‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: " + successCount + "/" + numberOfThreads + " –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã");
    }

    @Test
    void testWhiteBoxAttack_DataIntegrityVerification() {
        System.out.println("üîí White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–∞—Ä–æ–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
        Optional<User> adminUser = userRepository.findByUsername("admin");
        assertThat(adminUser).isPresent();
        String password = adminUser.get().getPassword();
        assertThat(password).doesNotContain("password"); // –ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        assertThat(password).startsWith("$2a$"); // BCrypt —Ö–µ—à
        System.out.println("‚úÖ –ü–∞—Ä–æ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é BCrypt");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –†–æ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        assertThat(adminUser.get().getRole()).isEqualTo(Role.ADMIN);
        System.out.println("‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        assertThat(adminUser.get().isEnabled()).isTrue();
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        User originalUser = adminUser.get();
        userService.updateLastLogin("admin");
        
        Optional<User> updatedUser = userRepository.findByUsername("admin");
        assertThat(updatedUser).isPresent();
        assertThat(updatedUser.get().getLastLogin()).isNotNull();
        System.out.println("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    @Test
    void testWhiteBoxAttack_SecurityConfigurationVerification() {
        System.out.println("‚öôÔ∏è White Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        ResponseEntity<String> publicResponse = restTemplate.getForEntity("/public/info", String.class);
        assertThat(publicResponse.getStatusCode().is2xxSuccessful()).isTrue();
        System.out.println("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        ResponseEntity<String> protectedResponse = restTemplate.getForEntity("/user/profile", String.class);
        assertThat(protectedResponse.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
        System.out.println("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª—å ADMIN
        ResponseEntity<String> adminResponse = restTemplate.withBasicAuth("user", "password")
                .getForEntity("/admin/users", String.class);
        assertThat(adminResponse.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
        System.out.println("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–æ–ª—å ADMIN");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: H2 –∫–æ–Ω—Å–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        ResponseEntity<String> h2Response = restTemplate.getForEntity("/h2-console", String.class);
        assertThat(h2Response.getStatusCode().is2xxSuccessful()).isTrue();
        System.out.println("‚úÖ H2 –∫–æ–Ω—Å–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
    }
}
