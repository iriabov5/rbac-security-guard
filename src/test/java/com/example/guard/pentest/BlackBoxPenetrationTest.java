package com.example.guard.pentest;

import com.example.guard.entity.Role;
import com.example.guard.entity.User;
import com.example.guard.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.annotation.Commit;

import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥ - –∏–º–∏—Ç–∞—Ü–∏—è –∞—Ç–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ –±–µ–∑ –∑–Ω–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
class BlackBoxPenetrationTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    @Commit
    void setUp() {
        // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        userRepository.deleteAll();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        createTestUsers();
    }

    private void createTestUsers() {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        User user = new User();
        user.setUsername("user");
        user.setPassword(passwordEncoder.encode("password"));
        user.setRole(Role.USER);
        user.setEnabled(true);
        userRepository.save(user);

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        User admin = new User();
        admin.setUsername("admin");
        admin.setPassword(passwordEncoder.encode("password"));
        admin.setRole(Role.ADMIN);
        admin.setEnabled(true);
        userRepository.save(admin);
    }

    @Test
    void testBlackBoxAttack_UnauthorizedAccessAttempts() {
        System.out.println("üîç Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –ü–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞");
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –î–æ—Å—Ç—É–ø –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        ResponseEntity<String> response1 = restTemplate.getForEntity("/admin/users", String.class);
        assertThat(response1.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
        System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: " + response1.getStatusCode());

        // –ü–æ–ø—ã—Ç–∫–∞ 2: –î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        ResponseEntity<String> response2 = restTemplate.withBasicAuth("hacker", "password123")
                .getForEntity("/admin/users", String.class);
        assertThat(response2.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
        System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: " + response2.getStatusCode());

        // –ü–æ–ø—ã—Ç–∫–∞ 3: –î–æ—Å—Ç—É–ø —Å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
        ResponseEntity<String> response3 = restTemplate.withBasicAuth("user", "password")
                .getForEntity("/admin/users", String.class);
        assertThat(response3.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN);
        System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: " + response3.getStatusCode());

        // –ü–æ–ø—ã—Ç–∫–∞ 4: –î–æ—Å—Ç—É–ø –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        ResponseEntity<String> response4 = restTemplate.getForEntity("/admin/secret", String.class);
        assertThat(response4.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);
        System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: " + response4.getStatusCode());
    }

    @Test
    void testBlackBoxAttack_DDoSResistance() {
        System.out.println("üö® Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ DDoS –∞—Ç–∞–∫–∞–º");
        
        String attackerIP = "192.168.1.666";
        String endpoint = "/public/info";
        
        // –ò–º–∏—Ç–∞—Ü–∏—è DDoS –∞—Ç–∞–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        ExecutorService executor = Executors.newFixedThreadPool(20);
        List<CompletableFuture<ResponseEntity<String>>> futures = new ArrayList<>();
        
        for (int i = 0; i < 50; i++) {
            CompletableFuture<ResponseEntity<String>> future = CompletableFuture.supplyAsync(() -> {
                HttpHeaders headers = new HttpHeaders();
                headers.set("X-Forwarded-For", attackerIP);
                HttpEntity<String> entity = new HttpEntity<>(headers);
                
                return restTemplate.exchange(endpoint, HttpMethod.GET, entity, String.class);
            }, executor);
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        executor.shutdown();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        int successCount = 0;
        int blockedCount = 0;
        
        for (CompletableFuture<ResponseEntity<String>> future : futures) {
            try {
                ResponseEntity<String> response = future.get();
                if (response.getStatusCode().is2xxSuccessful()) {
                    successCount++;
                } else if (response.getStatusCode() == HttpStatus.TOO_MANY_REQUESTS) {
                    blockedCount++;
                }
            } catch (Exception e) {
                blockedCount++;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–µ—Ä–∂–∞–ª–∞ –∞—Ç–∞–∫—É
        assertThat(successCount).isLessThanOrEqualTo(10); // –ú–∞–∫—Å–∏–º—É–º 10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        assertThat(blockedCount).isGreaterThan(0); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        
        System.out.println("‚úÖ DDoS –∞—Ç–∞–∫–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∞:");
        System.out.println("   üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: " + successCount + " (–ª–∏–º–∏—Ç: 10)");
        System.out.println("   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: " + blockedCount);
        System.out.println("   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ DDoS –∞—Ç–∞–∫–∞–º: " + (blockedCount > successCount));
    }

    @Test
    void testBlackBoxAttack_BruteForceResistance() {
        System.out.println("üîê Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∞–º");
        
        String targetUser = "admin";
        String[] commonPasswords = {
            "admin", "password", "123456", "qwerty", "letmein",
            "welcome", "monkey", "dragon", "master", "hello"
        };
        
        int failedAttempts = 0;
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è
        for (String password : commonPasswords) {
            ResponseEntity<String> response = restTemplate.withBasicAuth(targetUser, password)
                    .getForEntity("/admin/users", String.class);
            
            if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {
                failedAttempts++;
            }
        }
        
        // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ (rate limiting –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ)
        assertThat(failedAttempts).isGreaterThanOrEqualTo(commonPasswords.length - 2);
        
        System.out.println("‚úÖ –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∞:");
        System.out.println("   üîê –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è: " + commonPasswords.length);
        System.out.println("   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: " + failedAttempts);
        System.out.println("   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∞–º: " + (failedAttempts == commonPasswords.length));
    }

    @Test
    void testBlackBoxAttack_SQLInjectionAttempts() {
        System.out.println("üíâ Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ SQL –∏–Ω—ä–µ–∫—Ü–∏—è–º");
        
        String[] sqlInjectionPayloads = {
            "admin'; DROP TABLE users; --",
            "admin' OR '1'='1",
            "admin' UNION SELECT * FROM users --",
            "admin' AND 1=1 --",
            "admin' OR 1=1 --"
        };
        
        int blockedAttempts = 0;
        
        // –ü–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for (String payload : sqlInjectionPayloads) {
            try {
                ResponseEntity<String> response = restTemplate.withBasicAuth(payload, "password")
                        .getForEntity("/admin/users", String.class);
                
                // –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å 401 –∏–ª–∏ 403, –Ω–æ –Ω–µ 500 (—á—Ç–æ –æ–∑–Ω–∞—á–∞–ª–æ –±—ã —É—Å–ø–µ—à–Ω—É—é –∏–Ω—ä–µ–∫—Ü–∏—é)
                assertThat(response.getStatusCode()).isIn(HttpStatus.UNAUTHORIZED, HttpStatus.FORBIDDEN);
                blockedAttempts++;
                
            } catch (Exception e) {
                // –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                blockedAttempts++;
            }
        }
        
        System.out.println("‚úÖ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:");
        System.out.println("   üíâ –ü–æ–ø—ã—Ç–æ–∫ SQL –∏–Ω—ä–µ–∫—Ü–∏–π: " + sqlInjectionPayloads.length);
        System.out.println("   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: " + blockedAttempts);
        System.out.println("   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ SQL –∏–Ω—ä–µ–∫—Ü–∏—è–º: " + (blockedAttempts == sqlInjectionPayloads.length));
    }

    @Test
    void testBlackBoxAttack_PathTraversalAttempts() {
        System.out.println("üìÅ Black Box –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ Path Traversal –∞—Ç–∞–∫–∞–º");
        
        String[] pathTraversalPayloads = {
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "/admin/../../../etc/passwd",
            "/admin/..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
        };
        
        int blockedAttempts = 0;
        
        // –ü–æ–ø—ã—Ç–∫–∞ Path Traversal –∞—Ç–∞–∫
        for (String payload : pathTraversalPayloads) {
            try {
                ResponseEntity<String> response = restTemplate.getForEntity(payload, String.class);
                
                // –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å 404 –∏–ª–∏ 401, –Ω–æ –Ω–µ 200 —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
                assertThat(response.getStatusCode()).isIn(HttpStatus.NOT_FOUND, HttpStatus.UNAUTHORIZED, HttpStatus.BAD_REQUEST);
                blockedAttempts++;
                
            } catch (Exception e) {
                blockedAttempts++;
            }
        }
        
        System.out.println("‚úÖ Path Traversal –∞—Ç–∞–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:");
        System.out.println("   üìÅ –ü–æ–ø—ã—Ç–æ–∫ Path Traversal: " + pathTraversalPayloads.length);
        System.out.println("   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: " + blockedAttempts);
        System.out.println("   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ Path Traversal: " + (blockedAttempts == pathTraversalPayloads.length));
    }
}
