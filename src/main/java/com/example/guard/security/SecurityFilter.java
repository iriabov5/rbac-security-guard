package com.example.guard.security;

import com.example.guard.service.ThreatDetectionService;
import com.example.guard.service.SecurityLoggingService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Map;

/**
 * Security Filter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑
 * –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Web Application Firewall (WAF)
 */
@Component
@Order(1) // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ —Ü–µ–ø–æ—á–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
public class SecurityFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(SecurityFilter.class);

    @Autowired
    private ThreatDetectionService threatDetectionService;

    @Autowired
    private SecurityLoggingService securityLoggingService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, 
                                  FilterChain filterChain) throws ServletException, IOException {
        
        String clientIp = getClientIpAddress(request);
        String userAgent = request.getHeader("User-Agent");
        String requestUri = request.getRequestURI();
        String method = request.getMethod();
        
        logger.debug("üîç WAF: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ {} {} –æ—Ç IP: {}", method, requestUri, clientIp);

        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É–≥—Ä–æ–∑—ã
            ThreatDetectionService.ThreatLevel threatLevel = threatDetectionService.analyzeRequest(request);
            
            if (threatLevel == ThreatDetectionService.ThreatLevel.HIGH || 
                threatLevel == ThreatDetectionService.ThreatLevel.MEDIUM) {
                
                String threatType = threatLevel == ThreatDetectionService.ThreatLevel.HIGH ? 
                    "HIGH_THREAT_DETECTED" : "MEDIUM_THREAT_DETECTED";
                String description = threatLevel == ThreatDetectionService.ThreatLevel.HIGH ? 
                    "–í—ã—Å–æ–∫–∞—è —É–≥—Ä–æ–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞" : "–°—Ä–µ–¥–Ω—è—è —É–≥—Ä–æ–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞";
                
                logger.warn("üö® WAF: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ {} —É–≥—Ä–æ–∑–∞ –æ—Ç IP: {} - URI: {}", 
                    threatLevel == ThreatDetectionService.ThreatLevel.HIGH ? "–≤—ã—Å–æ–∫–∞—è" : "—Å—Ä–µ–¥–Ω—è—è", 
                    clientIp, requestUri);
                securityLoggingService.logThreat(request, threatType, description);
                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                response.getWriter().write("{\"error\":\"Access denied by security policy\"}");
                return;
            }

            // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ security headers
            addSecurityHeaders(response);

            // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            securityLoggingService.logRequest(request, threatLevel);

            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
            filterChain.doFilter(request, response);

        } catch (Exception e) {
            logger.error("‚ùå WAF: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç IP: {}", clientIp, e);
            securityLoggingService.logThreat(request, "FILTER_ERROR", "–û—à–∏–±–∫–∞ –≤ security filter: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"Security analysis failed\"}");
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ security headers –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ç–∞–∫
     */
    private void addSecurityHeaders(HttpServletResponse response) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
        response.setHeader("X-Content-Type-Options", "nosniff");
        
        // X-Frame-Options - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Spring Security
        if (response.getHeader("X-Frame-Options") == null) {
            response.setHeader("X-Frame-Options", "DENY");
        }
        
        response.setHeader("X-XSS-Protection", "1; mode=block");
        
        // Content Security Policy
        response.setHeader("Content-Security-Policy", 
            "default-src 'self'; " +
            "script-src 'self' 'unsafe-inline'; " +
            "style-src 'self' 'unsafe-inline'; " +
            "img-src 'self' data:; " +
            "font-src 'self'");
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç MIME sniffing
        response.setHeader("X-Content-Type-Options", "nosniff");
        
        // Referrer Policy
        response.setHeader("Referrer-Policy", "strict-origin-when-cross-origin");
        
        // Permissions Policy
        response.setHeader("Permissions-Policy", 
            "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=()");
        
        // Strict Transport Security (–¥–ª—è HTTPS)
        response.setHeader("Strict-Transport-Security", "max-age=31536000; includeSubDomains");
        
        logger.debug("üõ°Ô∏è WAF: –î–æ–±–∞–≤–ª–µ–Ω—ã security headers");
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
     */
    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }
        
        return request.getRemoteAddr();
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏ health checks
        String path = request.getRequestURI();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π URI (–±–æ–ª–µ–µ 2048 —Å–∏–º–≤–æ–ª–æ–≤)
        if (path.length() > 2048) {
            logger.warn("üö® WAF: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π URI: {} —Å–∏–º–≤–æ–ª–æ–≤", path.length());
            return false; // –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        }
        
        return path.startsWith("/static/") || 
               path.startsWith("/css/") || 
               path.startsWith("/js/") || 
               path.startsWith("/images/") ||
               path.equals("/actuator/health");
    }
}
