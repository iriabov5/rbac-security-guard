package com.example.guard.service;

import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.regex.Pattern;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑ –≤ HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
 */
@Service
public class ThreatDetectionService {

    private static final Logger logger = LoggerFactory.getLogger(ThreatDetectionService.class);

    public enum ThreatLevel {
        LOW, MEDIUM, HIGH, CRITICAL
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è SQL –∏–Ω—ä–µ–∫—Ü–∏–π
    private static final List<Pattern> SQL_INJECTION_PATTERNS = Arrays.asList(
        Pattern.compile("(?i).*union.*select.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*drop\\s+table.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*delete\\s+from.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*insert\\s+into.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*update\\s+.*set.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*or\\s+1\\s*=\\s*1.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*'\\s*or\\s*'.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*;\\s*drop.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*--.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*/\\*.*\\*/.*", Pattern.CASE_INSENSITIVE)
    );

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è XSS –∞—Ç–∞–∫
    private static final List<Pattern> XSS_PATTERNS = Arrays.asList(
        Pattern.compile("(?i).*<script.*>.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*javascript:.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*onload\\s*=.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*onerror\\s*=.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*onclick\\s*=.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*<iframe.*>.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*<object.*>.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*<embed.*>.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*<link.*>.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*<meta.*>.*", Pattern.CASE_INSENSITIVE)
    );

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Path Traversal –∞—Ç–∞–∫
    private static final List<Pattern> PATH_TRAVERSAL_PATTERNS = Arrays.asList(
        Pattern.compile(".*\\.\\..*"),
        Pattern.compile(".*%2e%2e.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*%252e%252e.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*\\.\\./.*"),
        Pattern.compile(".*\\.\\.\\\\\\.*"),
        Pattern.compile(".*%2f.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*%5c.*", Pattern.CASE_INSENSITIVE)
    );

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Command Injection
    private static final List<Pattern> COMMAND_INJECTION_PATTERNS = Arrays.asList(
        Pattern.compile(".*;\\s*ls.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*;\\s*cat.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*;\\s*rm.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*;\\s*ps.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*;\\s*whoami.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*\\|\\s*ls.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*\\|\\s*cat.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*`.*`.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile(".*\\$\\{.*\\}.*", Pattern.CASE_INSENSITIVE)
    );

    // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent —Å—Ç—Ä–æ–∫–∏
    private static final List<Pattern> SUSPICIOUS_USER_AGENTS = Arrays.asList(
        Pattern.compile("(?i).*sqlmap.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*nikto.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*nmap.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*burp.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*zap.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*scanner.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*bot.*", Pattern.CASE_INSENSITIVE),
        Pattern.compile("(?i).*crawler.*", Pattern.CASE_INSENSITIVE)
    );

    // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    private static final List<String> SUSPICIOUS_HEADERS = Arrays.asList(
        "X-Forwarded-For", "X-Real-IP", "X-Originating-IP", "X-Remote-IP",
        "X-Remote-Addr", "X-Client-IP", "X-Host", "X-Forwarded-Host"
    );

    /**
     * –ê–Ω–∞–ª–∏–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–≥—Ä–æ–∑
     */
    public ThreatLevel analyzeRequest(HttpServletRequest request) {
        ThreatLevel maxThreatLevel = ThreatLevel.LOW;
        List<String> detectedThreats = new ArrayList<>();

        // 1. –ê–Ω–∞–ª–∏–∑ URI
        String uri = request.getRequestURI();
        ThreatLevel uriThreat = analyzeUri(uri);
        if (uriThreat.ordinal() > maxThreatLevel.ordinal()) {
            maxThreatLevel = uriThreat;
        }

        // 2. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        ThreatLevel paramsThreat = analyzeParameters(request);
        if (paramsThreat.ordinal() > maxThreatLevel.ordinal()) {
            maxThreatLevel = paramsThreat;
        }

        // 3. –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        ThreatLevel headersThreat = analyzeHeaders(request);
        if (headersThreat.ordinal() > maxThreatLevel.ordinal()) {
            maxThreatLevel = headersThreat;
        }

        // 4. –ê–Ω–∞–ª–∏–∑ User-Agent
        ThreatLevel userAgentThreat = analyzeUserAgent(request);
        if (userAgentThreat.ordinal() > maxThreatLevel.ordinal()) {
            maxThreatLevel = userAgentThreat;
        }

        // 5. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        ThreatLevel methodThreat = analyzeMethod(request);
        if (methodThreat.ordinal() > maxThreatLevel.ordinal()) {
            maxThreatLevel = methodThreat;
        }

        if (maxThreatLevel != ThreatLevel.LOW) {
            logger.warn("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ —É—Ä–æ–≤–Ω—è {}: {}", maxThreatLevel, detectedThreats);
        }

        return maxThreatLevel;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ URI –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    private ThreatLevel analyzeUri(String uri) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Path Traversal
        for (Pattern pattern : PATH_TRAVERSAL_PATTERNS) {
            if (pattern.matcher(uri).matches()) {
                logger.warn("üö® Path Traversal –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ URI: {}", uri);
                return ThreatLevel.HIGH;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if (uri.matches(".*\\.(php|asp|jsp|cgi|pl|py|sh|bat|exe|dll)$")) {
            logger.warn("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ URI: {}", uri);
            return ThreatLevel.HIGH; // –ü–æ–≤—ã—à–∞–µ–º –¥–æ HIGH –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ URI (–≤–æ–∑–º–æ–∂–Ω–∞—è –∞—Ç–∞–∫–∞)
        if (uri.length() > 2048) {
            logger.warn("üö® –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π URI: {} —Å–∏–º–≤–æ–ª–æ–≤", uri.length());
            return ThreatLevel.HIGH; // –ü–æ–≤—ã—à–∞–µ–º –¥–æ HIGH –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        }

        return ThreatLevel.LOW;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
     */
    private ThreatLevel analyzeParameters(HttpServletRequest request) {
        ThreatLevel maxThreat = ThreatLevel.LOW;

        // –ê–Ω–∞–ª–∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        Map<String, String[]> parameterMap = request.getParameterMap();
        for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {
            String paramName = entry.getKey();
            String[] paramValues = entry.getValue();

            for (String paramValue : paramValues) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
                ThreatLevel sqlThreat = checkPatterns(paramValue, SQL_INJECTION_PATTERNS, "SQL_INJECTION");
                if (sqlThreat.ordinal() > maxThreat.ordinal()) {
                    maxThreat = sqlThreat;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
                ThreatLevel xssThreat = checkPatterns(paramValue, XSS_PATTERNS, "XSS");
                if (xssThreat.ordinal() > maxThreat.ordinal()) {
                    maxThreat = xssThreat;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Command Injection
                ThreatLevel cmdThreat = checkPatterns(paramValue, COMMAND_INJECTION_PATTERNS, "COMMAND_INJECTION");
                if (cmdThreat.ordinal() > maxThreat.ordinal()) {
                    maxThreat = cmdThreat;
                }
            }
        }

        return maxThreat;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
     */
    private ThreatLevel analyzeHeaders(HttpServletRequest request) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for (String headerName : SUSPICIOUS_HEADERS) {
            String headerValue = request.getHeader(headerName);
            if (headerValue != null && !headerValue.isEmpty()) {
                logger.debug("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ {}: {}", headerName, headerValue);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–∞—è –∞—Ç–∞–∫–∞)
                if (headerValue.contains(",")) {
                    logger.warn("‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ {}: {}", headerName, headerValue);
                    return ThreatLevel.MEDIUM;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ User-Agent
        String userAgent = request.getHeader("User-Agent");
        if (userAgent == null || userAgent.trim().isEmpty()) {
            logger.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç User-Agent –∑–∞–≥–æ–ª–æ–≤–æ–∫");
            return ThreatLevel.MEDIUM;
        }

        return ThreatLevel.LOW;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ User-Agent
     */
    private ThreatLevel analyzeUserAgent(HttpServletRequest request) {
        String userAgent = request.getHeader("User-Agent");
        if (userAgent == null) {
            return ThreatLevel.LOW;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent
        for (Pattern pattern : SUSPICIOUS_USER_AGENTS) {
            if (pattern.matcher(userAgent).matches()) {
                logger.warn("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent: {}", userAgent);
                return ThreatLevel.HIGH;
            }
        }

        return ThreatLevel.LOW;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ HTTP –º–µ—Ç–æ–¥–∞
     */
    private ThreatLevel analyzeMethod(HttpServletRequest request) {
        String method = request.getMethod();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if (!Arrays.asList("GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS").contains(method)) {
            logger.warn("‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π HTTP –º–µ—Ç–æ–¥: {}", method);
            return ThreatLevel.MEDIUM;
        }

        return ThreatLevel.LOW;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
     */
    private ThreatLevel checkPatterns(String input, List<Pattern> patterns, String threatType) {
        for (Pattern pattern : patterns) {
            if (pattern.matcher(input).matches()) {
                logger.warn("üö® {} –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {}", threatType, input);
                return ThreatLevel.HIGH;
            }
        }
        return ThreatLevel.LOW;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑–∞—Ö
     */
    public Map<String, Object> getThreatDetails(HttpServletRequest request) {
        Map<String, Object> details = new HashMap<>();
        details.put("uri", request.getRequestURI());
        details.put("method", request.getMethod());
        details.put("userAgent", request.getHeader("User-Agent"));
        details.put("clientIp", getClientIp(request));
        details.put("timestamp", new Date());
        details.put("threatLevel", analyzeRequest(request));
        
        return details;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
     */
    private String getClientIp(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        return request.getRemoteAddr();
    }
}
