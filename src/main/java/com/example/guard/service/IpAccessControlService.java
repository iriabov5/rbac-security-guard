package com.example.guard.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –ø–æ IP –∞–¥—Ä–µ—Å–∞–º (Blacklist/Whitelist)
 */
@Service
public class IpAccessControlService {

    private static final Logger logger = LoggerFactory.getLogger(IpAccessControlService.class);

    // –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤
    private final Set<String> blacklistedIps = ConcurrentHashMap.newKeySet();
    
    // –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —ç—Ç–∏ IP)
    private final Set<String> whitelistedIps = ConcurrentHashMap.newKeySet();
    
    // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞
    private final Map<String, AtomicLong> accessAttempts = new ConcurrentHashMap<>();
    private final Map<String, AtomicLong> failedAttempts = new ConcurrentHashMap<>();
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (IP -> –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
    private final Map<String, Long> temporaryBlocks = new ConcurrentHashMap<>();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    private boolean whitelistMode = false; // false = blacklist mode, true = whitelist mode
    private int maxFailedAttempts = 5; // –ú–∞–∫—Å–∏–º—É–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    private long blockDurationMinutes = 60; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è IP –∞–¥—Ä–µ—Å–∞
     */
    public boolean isAccessAllowed(String ip) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (isTemporarilyBlocked(ip)) {
            logger.warn("üö´ IP {} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ip);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º whitelist)
        if (whitelistMode) {
            boolean allowed = whitelistedIps.contains(ip);
            if (!allowed) {
                logger.warn("üö´ IP {} –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ", ip);
            }
            return allowed;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        boolean blocked = blacklistedIps.contains(ip);
        if (blocked) {
            logger.warn("üö´ IP {} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ", ip);
        }
        
        return !blocked;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
     */
    public void addToBlacklist(String ip) {
        blacklistedIps.add(ip);
        logger.info("üö´ IP {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", ip);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ IP –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    public void removeFromBlacklist(String ip) {
        blacklistedIps.remove(ip);
        logger.info("‚úÖ IP {} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", ip);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
     */
    public void addToWhitelist(String ip) {
        whitelistedIps.add(ip);
        logger.info("‚úÖ IP {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", ip);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ IP –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    public void removeFromWhitelist(String ip) {
        whitelistedIps.remove(ip);
        logger.info("‚ùå IP {} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞", ip);
    }

    /**
     * –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
     */
    public void temporarilyBlockIp(String ip) {
        long blockUntil = System.currentTimeMillis() + (blockDurationMinutes * 60 * 1000);
        temporaryBlocks.put(ip, blockUntil);
        logger.warn("‚è∞ IP {} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {}", ip, new Date(blockUntil));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    private boolean isTemporarilyBlocked(String ip) {
        Long blockUntil = temporaryBlocks.get(ip);
        if (blockUntil == null) {
            return false;
        }
        
        if (System.currentTimeMillis() > blockUntil) {
            // –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ
            temporaryBlocks.remove(ip);
            return false;
        }
        
        return true;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
     */
    public void recordFailedAttempt(String ip) {
        AtomicLong failedCount = failedAttempts.computeIfAbsent(ip, k -> new AtomicLong(0));
        long count = failedCount.incrementAndGet();
        
        logger.warn("‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç IP {} (–ø–æ–ø—ã—Ç–∫–∞ #{})", ip, count);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if (count >= maxFailedAttempts) {
            temporarilyBlockIp(ip);
            logger.error("üö® IP {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", ip, count);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
     */
    public void recordSuccessfulAttempt(String ip) {
        accessAttempts.computeIfAbsent(ip, k -> new AtomicLong(0)).incrementAndGet();
        
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
        failedAttempts.remove(ip);
        
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç IP {}", ip);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ IP
     */
    public Map<String, Object> getIpStatistics(String ip) {
        Map<String, Object> stats = new HashMap<>();
        stats.put("ip", ip);
        stats.put("accessAttempts", accessAttempts.getOrDefault(ip, new AtomicLong(0)).get());
        stats.put("failedAttempts", failedAttempts.getOrDefault(ip, new AtomicLong(0)).get());
        stats.put("isBlacklisted", blacklistedIps.contains(ip));
        stats.put("isWhitelisted", whitelistedIps.contains(ip));
        stats.put("isTemporarilyBlocked", isTemporarilyBlocked(ip));
        
        Long blockUntil = temporaryBlocks.get(ip);
        if (blockUntil != null) {
            stats.put("blockedUntil", new Date(blockUntil));
        }
        
        return stats;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
     */
    public Set<String> getBlacklistedIps() {
        return new HashSet<>(blacklistedIps);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP
     */
    public Set<String> getWhitelistedIps() {
        return new HashSet<>(whitelistedIps);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
     */
    public Map<String, Date> getTemporarilyBlockedIps() {
        Map<String, Date> blocked = new HashMap<>();
        for (Map.Entry<String, Long> entry : temporaryBlocks.entrySet()) {
            blocked.put(entry.getKey(), new Date(entry.getValue()));
        }
        return blocked;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
     */
    public void cleanupExpiredBlocks() {
        long now = System.currentTimeMillis();
        temporaryBlocks.entrySet().removeIf(entry -> entry.getValue() < now);
        logger.debug("üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø IP –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞
     */
    public Map<String, Long> getTopAccessIps(int limit) {
        return accessAttempts.entrySet().stream()
                .sorted(Map.Entry.<String, AtomicLong>comparingByValue((a, b) -> Long.compare(b.get(), a.get())))
                .limit(limit)
                .collect(LinkedHashMap::new, (m, e) -> m.put(e.getKey(), e.getValue().get()), Map::putAll);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø IP –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
     */
    public Map<String, Long> getTopFailedIps(int limit) {
        return failedAttempts.entrySet().stream()
                .sorted(Map.Entry.<String, AtomicLong>comparingByValue((a, b) -> Long.compare(b.get(), a.get())))
                .limit(limit)
                .collect(LinkedHashMap::new, (m, e) -> m.put(e.getKey(), e.getValue().get()), Map::putAll);
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    public void setWhitelistMode(boolean enabled) {
        this.whitelistMode = enabled;
        logger.info("üîß –†–µ–∂–∏–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ {}", enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω");
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
     */
    public void setMaxFailedAttempts(int maxAttempts) {
        this.maxFailedAttempts = maxAttempts;
        logger.info("üîß –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {}", maxAttempts);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    public void setBlockDurationMinutes(long minutes) {
        this.blockDurationMinutes = minutes;
        logger.info("üîß –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {} –º–∏–Ω—É—Ç", minutes);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public Map<String, Object> getSettings() {
        Map<String, Object> settings = new HashMap<>();
        settings.put("whitelistMode", whitelistMode);
        settings.put("maxFailedAttempts", maxFailedAttempts);
        settings.put("blockDurationMinutes", blockDurationMinutes);
        settings.put("blacklistedCount", blacklistedIps.size());
        settings.put("whitelistedCount", whitelistedIps.size());
        settings.put("temporarilyBlockedCount", temporaryBlocks.size());
        return settings;
    }
}
